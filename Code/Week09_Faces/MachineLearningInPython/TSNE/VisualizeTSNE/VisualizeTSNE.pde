
/*
VISUALIZE TSNE
Jeff Thompson | 2016-18 | jeffreythompson.org

After running t-SNE (or any dimensionality reduction, just spitting
out a csv file isn't very fun, and it doesn't do a good job of showing
us how well the algorithm worked either. This sketch places the images
in their 2D position generated by t-SNE.

Once the visualization is saved, open it and look closely: you'll see 
groups of images clumped together, sometimes forming blobs or long streaks.
Images near each other are visually similar, and you can even follow a
trail from one image to another through this space!

NOTE: this sketch assumes your positions have been normalized to a range of
-1 to 1 already. If yours isn't, you could implement it in the sketch too.

CHALLENGES
+ Sadly, images close to each other will overlap and it may be hard to
  see them in dense clusters. One option would be to place them images,
  then apply a "force-directed graph" to move them apart automatically!

*/

String modelFilename =  "../Model_tSNE_2D.csv";
String outputFilename = "../Flowers.png";

int margin =    100;    // leave some margin on the sides?
int imageSize = 80;     // how big to draw the individual images


void setup() {
  
  // create PGraphics to draw into
  // (we do this instead of the sketch window, since we want to
  // draw such a large graphic!)
  println("creating PGraphics context...");
  PGraphics pg = createGraphics(4000,4000);
  pg.beginDraw();
  pg.background(255);
  pg.rectMode(CENTER);    // draw images centered on their x/y
  
  // load the model file and draw the images
  println("drawing the images...");
  String[] images = loadStrings(modelFilename);
  for (int i=0; i<images.length; i++) {
    
    // for each line in the file, split the data
    // and get the image filename
    String[] data = images[i].split(",");
    String path = data[0];
    
    // get the x/y position and convert to floats
    float x = Float.parseFloat(data[1]);
    float y = Float.parseFloat(data[2]);
    
    // scale to the size of the PGraphics
    x = map(x, -1,1, margin,pg.width-margin);
    y = map(y, -1,1, margin,pg.height-margin);
      
    // load the image and draw
    // (note that we add the "../" since this sketch is inside
    // a folder, so the original images are up another level - we
    // could also make our labels in the Python script use 
    // full paths and skip this)
    PImage img = loadImage("../" + path);
    pg.image(img, x,y, imageSize,imageSize);
  }
  pg.endDraw();
  
  // save it and quit
  println("saving to file...");
  pg.save(outputFilename);
  println("- done, bye");
  exit();
}